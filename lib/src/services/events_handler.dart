//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'dart:async';

import 'package:lcc_api_dart/model.dart';
import 'package:lcc_api_dart/src/model/local/event_message.dart';

class EventsHandler {
  final StreamController<ClientEvent> _clientEventController = StreamController<ClientEvent>.broadcast();

  final StreamController<CommandEvent> _commandEventController = StreamController<CommandEvent>.broadcast();

  final StreamController<DeviceEvent> _deviceEventController = StreamController<DeviceEvent>.broadcast();

  Stream<ClientEvent> get clientEvent => _clientEventController.stream;
  Stream<CommandEvent> get commandEvent => _commandEventController.stream;
  Stream<DeviceEvent> get deviceEvent => _deviceEventController.stream;
  Future dispose() async {
    await _clientEventController.close();
    await _commandEventController.close();
    await _deviceEventController.close();
  }

  handleMessage(EventMessage message) {
    if (message.eventType == EventType.Client) {
      _clientEventController.add(ClientEvent.fromJson(message.event));
      return;
    }

    if (message.eventType == EventType.Command) {
      _commandEventController.add(CommandEvent.fromJson(message.event));
      return;
    }

    if (message.eventType == EventType.Device) {
      _deviceEventController.add(DeviceEvent.fromJson(message.event));
      return;
    }
  }
}
